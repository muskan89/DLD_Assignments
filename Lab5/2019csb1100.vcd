$date
	Tue Nov 24 13:08:12 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module bcd_tb $end
$var wire 4 ! tb_sum [3:0] $end
$var wire 1 " tb_cout $end
$var reg 1 # clk $end
$var reg 4 $ tb_A [3:0] $end
$var reg 4 % tb_B [3:0] $end
$var reg 1 & tb_cin $end
$scope module bcd_ins $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 & cin $end
$var wire 1 # clk $end
$var wire 4 ) sum [3:0] $end
$var wire 1 * cout3 $end
$var wire 1 + cout2 $end
$var wire 1 , cout1 $end
$var wire 1 - cout0 $end
$var wire 1 " cout $end
$var wire 4 . SUM [3:0] $end
$scope module ins1 $end
$var wire 1 # clock $end
$var wire 1 & in1 $end
$var wire 1 / in2 $end
$var wire 1 0 in3 $end
$var wire 1 1 in4 $end
$var wire 1 2 in5 $end
$var wire 1 3 out $end
$var wire 1 4 d $end
$var reg 33 5 mem [32:0] $end
$var reg 1 6 q $end
$var reg 1 7 qbar $end
$upscope $end
$scope module ins10 $end
$var wire 1 # clock $end
$var wire 1 8 in1 $end
$var wire 1 9 in2 $end
$var wire 1 : in3 $end
$var wire 1 ; in4 $end
$var wire 1 < out $end
$var wire 1 * in5 $end
$var wire 1 = d $end
$var reg 33 > mem [32:0] $end
$var reg 1 ? q $end
$var reg 1 @ qbar $end
$upscope $end
$scope module ins11 $end
$var wire 1 # clock $end
$var wire 1 A in1 $end
$var wire 1 B in2 $end
$var wire 1 C in3 $end
$var wire 1 D in4 $end
$var wire 1 E out $end
$var wire 1 * in5 $end
$var wire 1 F d $end
$var reg 33 G mem [32:0] $end
$var reg 1 H q $end
$var reg 1 I qbar $end
$upscope $end
$scope module ins12 $end
$var wire 1 # clock $end
$var wire 1 J in1 $end
$var wire 1 K in2 $end
$var wire 1 L in3 $end
$var wire 1 M in4 $end
$var wire 1 N out $end
$var wire 1 * in5 $end
$var wire 1 O d $end
$var reg 33 P mem [32:0] $end
$var reg 1 Q q $end
$var reg 1 R qbar $end
$upscope $end
$scope module ins13 $end
$var wire 1 # clock $end
$var wire 1 S in1 $end
$var wire 1 T in2 $end
$var wire 1 U in3 $end
$var wire 1 V in4 $end
$var wire 1 W out $end
$var wire 1 * in5 $end
$var wire 1 X d $end
$var reg 33 Y mem [32:0] $end
$var reg 1 Z q $end
$var reg 1 [ qbar $end
$upscope $end
$scope module ins2 $end
$var wire 1 # clock $end
$var wire 1 & in1 $end
$var wire 1 \ in2 $end
$var wire 1 ] in3 $end
$var wire 1 ^ in4 $end
$var wire 1 _ in5 $end
$var wire 1 - out $end
$var wire 1 ` d $end
$var reg 33 a mem [32:0] $end
$var reg 1 b q $end
$var reg 1 c qbar $end
$upscope $end
$scope module ins3 $end
$var wire 1 # clock $end
$var wire 1 - in1 $end
$var wire 1 d in2 $end
$var wire 1 e in3 $end
$var wire 1 f in4 $end
$var wire 1 g in5 $end
$var wire 1 h out $end
$var wire 1 i d $end
$var reg 33 j mem [32:0] $end
$var reg 1 k q $end
$var reg 1 l qbar $end
$upscope $end
$scope module ins4 $end
$var wire 1 # clock $end
$var wire 1 - in1 $end
$var wire 1 m in2 $end
$var wire 1 n in3 $end
$var wire 1 o in4 $end
$var wire 1 p in5 $end
$var wire 1 , out $end
$var wire 1 q d $end
$var reg 33 r mem [32:0] $end
$var reg 1 s q $end
$var reg 1 t qbar $end
$upscope $end
$scope module ins5 $end
$var wire 1 # clock $end
$var wire 1 , in1 $end
$var wire 1 u in2 $end
$var wire 1 v in3 $end
$var wire 1 w in4 $end
$var wire 1 x in5 $end
$var wire 1 y out $end
$var wire 1 z d $end
$var reg 33 { mem [32:0] $end
$var reg 1 | q $end
$var reg 1 } qbar $end
$upscope $end
$scope module ins6 $end
$var wire 1 # clock $end
$var wire 1 , in1 $end
$var wire 1 ~ in2 $end
$var wire 1 !" in3 $end
$var wire 1 "" in4 $end
$var wire 1 #" in5 $end
$var wire 1 + out $end
$var wire 1 $" d $end
$var reg 33 %" mem [32:0] $end
$var reg 1 &" q $end
$var reg 1 '" qbar $end
$upscope $end
$scope module ins7 $end
$var wire 1 # clock $end
$var wire 1 + in1 $end
$var wire 1 (" in2 $end
$var wire 1 )" in3 $end
$var wire 1 *" in4 $end
$var wire 1 +" in5 $end
$var wire 1 ," out $end
$var wire 1 -" d $end
$var reg 33 ." mem [32:0] $end
$var reg 1 /" q $end
$var reg 1 0" qbar $end
$upscope $end
$scope module ins8 $end
$var wire 1 # clock $end
$var wire 1 + in1 $end
$var wire 1 1" in2 $end
$var wire 1 2" in3 $end
$var wire 1 3" in4 $end
$var wire 1 4" in5 $end
$var wire 1 * out $end
$var wire 1 5" d $end
$var reg 33 6" mem [32:0] $end
$var reg 1 7" q $end
$var reg 1 8" qbar $end
$upscope $end
$scope module ins9 $end
$var wire 1 # clock $end
$var wire 1 9" in1 $end
$var wire 1 :" in2 $end
$var wire 1 ;" in3 $end
$var wire 1 <" in4 $end
$var wire 1 * in5 $end
$var wire 1 " out $end
$var wire 1 =" d $end
$var reg 33 >" mem [32:0] $end
$var reg 1 ?" q $end
$var reg 1 @" qbar $end
$upscope $end
$upscope $end
$upscope $end
$scope module switch_box_4x4 $end
$var wire 4 A" in [3:0] $end
$var wire 4 B" out [3:0] $end
$var reg 16 C" configure [15:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx C"
bx B"
bz A"
x@"
0?"
b11111111110000000000 >"
0="
0<"
1;"
1:"
09"
x8"
07"
b11101000 6"
05"
04"
03"
02"
01"
x0"
0/"
b10010110 ."
0-"
0,"
0+"
0*"
0)"
0("
x'"
0&"
b11101000 %"
0$"
0#"
0""
1!"
0~
x}
0|
b10010110 {
1z
1y
0x
0w
1v
0u
xt
0s
b11101000 r
0q
0p
0o
0n
0m
xl
0k
b10010110 j
1i
1h
0g
0f
0e
0d
xc
0b
b11101000 a
1`
0_
0^
1]
1\
x[
0Z
b11000000001100000000 Y
0X
0W
0V
1U
1T
0S
xR
0Q
b111100000011110000 P
1O
1N
0M
1L
1K
0J
xI
0H
b110011000011001100 G
1F
1E
0D
1C
1B
0A
x@
0?
b10101010101010101010 >
0=
0<
0;
1:
19
08
x7
06
b10010110 5
04
03
02
01
10
1/
b110 .
1-
0,
0+
0*
b110 )
b1 (
b101 '
0&
b1 %
b101 $
0#
0"
b110 !
$end
#10
1b
1k
1|
1H
1Q
17
0c
0l
1t
0}
1'"
10"
18"
1@"
1@
0I
0R
1[
1#
#20
b111 !
b111 )
1<
19"
1=
18
1A
1J
1S
b111 .
13
0#
14
1&
#30
1?
16
0@
07
1#
#40
1W
0N
1<"
1;
1D
1M
1X
1V
1,"
b1001 !
b1001 )
0E
0;"
0:
0C
0O
0L
0U
0y
1-"
1+
0:"
09
0F
0B
0K
0T
b1001 .
0h
0z
1$"
1,
0i
1e
1q
1n
0#
b111 $
b111 '
#50
0k
1s
0|
1&"
1/"
0H
0Q
1Z
1l
0t
1}
0'"
00"
1I
1R
0[
1#
#60
1"
1E
1N
0W
b111 !
b111 )
1<
1="
0<"
0;
1F
0D
1O
0M
0V
b1 .
0,"
0X
1=
1*
0-"
1)"
15"
12"
0#
b1111 $
b1111 '
#70
0Z
1Q
1H
1?"
17"
0/"
1[
0R
0I
0@"
08"
10"
1#
#80
0#
#90
1#
#100
0#
